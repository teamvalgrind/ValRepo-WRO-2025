void goToPosition(int targetX, int targetY, int currentX, int currentY) {
  int pos = CENTERVALUE;  // Inicialmente recto
  if (DEBUG) Serial2.println("Target: " + String(targetX) + " , " + String(targetY));
  if (DEBUG) Serial2.println("Current: " + String(currentX) + " , " + String(currentY));
  following = true;
  // readTime = millis();
  if (currentY < targetY) {

    if (targetX == XVALUEGREEN) {  // Para el color verde
      if (DEBUG) Serial2.println("Para el color verde");
      if (currentX < targetX) {
        pos = map(currentX, 0, targetX, MAXLEFT, CENTERVALUE);  // Calculamos los grados a cruzar
        if (DEBUG) Serial2.println("Para el color verde corrige");
      } else {
        pos = CENTERVALUE - 6;  // Mantener recto si ya está en posición
        if (DEBUG) Serial2.println("Para el color verde sigue recto");
      }
    } else if (targetX == XVALUERED) {  // Para el color rojo
      if (DEBUG) Serial2.println("Para el color rojo");

      if (currentX > targetX) {
        pos = map(currentX, targetX, 320, CENTERVALUE, MAXRIGHT);  // Calculamos los grados a cruzar
        if (DEBUG) Serial2.println("Para el color rojo corrige");
      } else {
        pos = CENTERVALUE + 10;  // Mantener recto si ya está en posición
        if (DEBUG) Serial2.println("Para el color verde sigue recto");
      }
    }
    //--------------------------------------------------------------------------

    else if (targetX == XVALUEMAG1) {

      if (currentX > targetX) {
        pos = map(currentX, 0, targetX, MAXLEFT, CENTERVALUE);  // Calculamos los grados a cruzar
        if (DEBUG) Serial2.println("Para mangenta 1 corrige");
      } else {
        pos = CENTERVALUE + 6;  // Mantener recto si ya está en posición
        if (DEBUG) Serial2.println("Para mangenta 1 recto");
      }

    } else if (targetX == XVALUEMAG2) {
      if (currentX > targetX) {
        pos = map(currentX, targetX, 320, CENTERVALUE, MAXRIGHT);  // Calculamos los grados a cruzar
        if (DEBUG) Serial2.println("Para mangenta 2 corrige");
      } else {
        pos = CENTERVALUE + 6;  // Mantener recto si ya está en posición
        if (DEBUG) Serial2.println("Para mangenta 2 sigue recto");
      }
    }
    //--------------------------------------------------------
    currentGrade = pos;
    direccion.write(pos);  // Ajustar el servo
    if (DEBUG) Serial2.println("Posicion Servo: " + String(pos));
    setMove(2, 1, SPEED2);  // Avanzar
  }
}


void printValues(byte mIndex) {
  switch (pixy.ccc.blocks[mIndex].m_signature) {
    case 0:
      if (DEBUG) Serial2.print(F("Ninguno. Malo "));
      if (DEBUG) Serial2.print(mIndex);
      break;
    case 1:
      if (DEBUG) Serial2.print(F("Azul "));
      break;
    case 2:
      if (DEBUG) Serial2.print(F("Naranja "));
      break;
    case 3:
      if (DEBUG) Serial2.print(F("Rojo "));
      break;
    case 4:
      if (DEBUG) Serial2.print(F("Verde "));
      break;
    case 5:
      if (DEBUG) Serial2.print(F("Magenta "));
      break;
    default:
      if (DEBUG) Serial2.print(F("Ninguno. Signature "));
      if (DEBUG) Serial2.print(mIndex);
  }
  if (DEBUG) Serial2.print("  X: " + String(pixy.ccc.blocks[mIndex].m_x));
  if (DEBUG) Serial2.println("  Y: " + String(pixy.ccc.blocks[mIndex].m_y));
}

void printAllValues() {
  if (DEBUG) Serial2.println();
  for (byte b = 0; b < 40; b++)
    if (DEBUG) Serial2.print("-");
  if (DEBUG) Serial2.println();

  readColor();
  for (byte i = 0; i < pixy.ccc.numBlocks; i++)
    printValues(i);

  for (byte b = 0; b < 40; b++)
    if (DEBUG) Serial2.print("-");
  if (DEBUG) Serial2.println();
}